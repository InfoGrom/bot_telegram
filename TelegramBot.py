from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from ChatGPT import ChatGPT
from DataBase import DataBase
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from lang import *


class TelegramBot:
  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  def __init__(self, api_key_tg, api_keys_gpt, database_file,
               name_bot_command):
    self.bot = Bot(token=api_key_tg)
    self.chatgpt = ChatGPT(api_keys_gpt)
    self.database = DataBase(database_file)
    self.dp = Dispatcher(self.bot)
    self.name_bot_command = name_bot_command

    self.dp.message_handler(commands=["start"])(self.process_start_command)
    self.dp.message_handler(commands=["pay"])(self.pay_command_handler)
    self.dp.message_handler(commands=["info"])(self.info_command_handler)
    self.dp.message_handler(commands=["help"])(self.help_command_handler)
    #self.dp.message_handler(commands=["help"])(self.ratings_command_handler)
    self.dp.message_handler()(self.echo_message)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(self.dp)

  def RegisterUser(self,
                  username,
                  userid,
                  firstname,
                  lastname,
                  banned=0,
                  is_spam=1,
                  balance=10,
                  lang='ru',
                  tokens=100,
                  ratings=0):
      try:
          userdata = self.database.query(f"SELECT * FROM users WHERE userid={userid}")
          if len(userdata) <= 0:
              if balance > 0:
                  self.database.query(
                      f"INSERT INTO users (username, userid, firstname, lastname, banned, is_spam) VALUES('{username}', '{userid}', '{firstname}', '{lastname}', {banned}, {is_spam})",
                      commit=True)
                  self.database.query(
                      f"INSERT INTO settings (userid, balance, lang, tokens, ratings) VALUES('{userid}', {balance}, '{lang}', {tokens}, {ratings})",
                      commit=True)
                  return True
              else:
                  self.bot.send_message(chat_id=userid, text="–í–∞—à –±–∞–ª–∞–Ω—Å –±–ª–∏–∑–æ–∫ –∫ 0, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay!")
                  return False
          return False
      except:
          return False
    
  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  def CheckUser(self, userid):
    userdata = self.database.query(
      f"SELECT * FROM users WHERE userid={userid}")
    if len(userdata) <= 0:
      return False
    else:
      return True

  # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
  async def process_start_command(self, message: types.Message):
    userid = message.from_user.id
    username = message.from_user.username
    firstname = message.from_user.first_name
    lastname = message.from_user.last_name

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if (not self.CheckUser(userid)):
      self.RegisterUser(username, userid, firstname, lastname)
    await message.reply(
      lang['RU_COMMAND_START'].format(bot_name=self.name_bot_command))

  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /pay
  async def pay_command_handler(self, message: types.Message):
      inline_kb = types.InlineKeyboardMarkup()
      inline_btn_1000 = types.InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å 1000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 100 —Ä—É–±.', url='https://oplata.qiwi.com/form?invoiceUid=00661439-561d-4d24-8276-1b2ff6974eac&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot')
      inline_kb.add(inline_btn_1000)

      inline_btn_2000 = types.InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å 2000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 200 —Ä—É–±.', url='https://oplata.qiwi.com/form?invoiceUid=6ae6ee15-e58f-44d1-af0d-abff076ab1fc&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot')
      inline_kb.add(inline_btn_2000)

      inline_btn_4000 = types.InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å 4000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 400 —Ä—É–±.', url='https://oplata.qiwi.com/form?invoiceUid=ecde74f4-2f5d-434f-9c09-baca9a2c1323&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot')
      inline_kb.add(inline_btn_4000)

      await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: https://t.me/IvanovGPT_Forum/243 –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ @username. –ü—Ä–∏–º–µ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø @username, –æ–ø–ª–∞—Ç–∏–ª(–∞) 1000 —Ç–æ–∫–µ–Ω–æ–≤, –æ–±–Ω–æ–≤–∏—Ç–µ –º–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", reply_markup=inline_kb)

  def GetUserSettings(self, userid):
    userdata = self.database.query(
      f"SELECT * FROM settings WHERE userid={userid}")
    if len(userdata) <= 0:
      return {"result": userdata, "error": False}
    else:
      return {"result": userdata, "error": True}
    
  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
  async def info_command_handler(self, message: types.Message):
    user_id = message.from_user.id
    settings_user = self.GetUserSettings(user_id)

    if (settings_user["error"]):
      settings_user = settings_user["result"]
    else:
      return

    balance = settings_user["balance"]
    lang = settings_user["lang"]
    tokens = settings_user["tokens"]
    ratings = settings_user ["ratings"]
    text = f"\n\n<b>–í–∞—à ID:</b> {user_id}\n<b>–í–∞—à–µ –∏–º—è:</b> <code>{message.from_user.username}</code>\n\n<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b> <code>{ratings}</code>\n<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{tokens}</code> —Ç–æ–∫–µ–Ω–æ–≤\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —Ä—É–±–ª–µ–π"
    await self.bot.send_message(chat_id=message.chat.id,
                                text=text,
                                reply_to_message_id=message.message_id,
                                parse_mode='HTML')
    
    
  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
  async def help_command_handler(self, message: types.Message):
    user_id = message.from_user.id
    settings_user = self.GetUserSettings(user_id)

    if (settings_user["error"]):
      settings_user = settings_user["result"]
    else:
      return
    text = f"üñ• <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>:\n\n<code>IvanovGPTbot</code> - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.\n\n<b>–ß—Ç–æ —è —É–º–µ—é?</b>\n\n–í—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–∞–∫–∏–µ –∫–∞–∫:\n\n - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —á–µ–º –æ–±—ã—á–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –∫–∞–∫ Alisa, Siri –∏ –¥—Ä—É–≥–∏–µ.\n\n- –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞, –∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n- –ú–Ω–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n- –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.\n\n- –ü–∏—Å–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Å—Ç–∏—Ö–∏, –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–æ—á—Ç–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫, —Ä–∞—Å—Å–∫–∞–∑—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –¥–ª—è –º–µ–Ω—è –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞.\n\n- –î–µ–ª–∞—Ç—å –≤—ã–∂–∏–º–∫–∏ –∏–∑ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –ï—Å–ª–∏ ¬´—Å–∫–æ—Ä–º–∏—Ç—å¬ª –º–Ω–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–¥–µ–ª–∞—Ç—å –≤—ã–∂–∏–º–∫—É (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî summarise), —Ç–æ —è –≤—ã–¥–∞–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é. –ü—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ–±—ã —Å–º—ã—Å–ª —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è.\n\n- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –Ø –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: –ò–≤–∞–Ω–æ–≤, perform sentiment analysis) –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏. –ü—Ä–∏ —ç—Ç–æ–º —è —É–∫–∞–∑—ã–≤–∞—é, –≤ –∫–∞–∫–æ–º –∫–ª—é—á–µ –Ω–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç, –∏ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞—é –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏.\n\n- –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ú–µ–Ω—è –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî paraphrase) —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –°—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—è–¥ –ª–∏ –ø—Ä–æ–π–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç, –Ω–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –µ–≥–æ –≤–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n- –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç. –ú–µ–Ω—è –≤–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –æ–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞, –Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–∂–∏–¥–∞—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç.\n\n- –ü–∏—Å–∞—Ç—å –∫–æ–¥. –Ø –º–æ–≥—É —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –∫–æ–¥, –¥–∞–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π.\n\n- –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ò–≤–∞–Ω–æ–≤ ‚Äî —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∏ —Ä–µ—à–∞—Ç—å, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –í–∞–º.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ Midjourney –∏–ª–∏ –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É.\n\n–ù—É —á—Ç–æ <code>{message.from_user.username}</code>? –ù–∞—á–Ω–µ–º? –ù–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /start"
    await self.bot.send_message(chat_id=message.chat.id,
                                text=text,
                                reply_to_message_id=message.message_id,
                                parse_mode='HTML')
    
  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
  async def echo_message(self, message: types.Message):
    message_id = message.message_id
    rq = message.text
    userid = message.from_user.id
    username = message.from_user.username
    firstname = message.from_user.first_name
    lastname = message.from_user.last_name
    if not self.CheckUser(userid):
      self.RegisterUser(username, userid, firstname, lastname)

    me = await self.bot.get_me()
    print(me.username)

      # –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç":
    await self.bot.send_chat_action(chat_id=message.chat.id, action='typing')

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
    if message.text == '–î–∞–π —Å—Å—ã–ª–∫—É':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
        url_button = types.InlineKeyboardButton(text='–î–ê', url='https://t.me/IvanovGPTbot')
        delete_button = types.InlineKeyboardButton(text='–ù–ï–¢', callback_data='delete')
        keyboard_markup.add(url_button, delete_button)
        await self.bot.send_message(
            chat_id=message.chat.id,
            text='–í—ã –∏—Å–∫–∞–ª–∏ —Å—Å—ã–ª–∫—É —Å –ò–ò?',
            reply_to_message_id=message.message_id,
            reply_markup=keyboard_markup
        )

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
    if rq in [
        '–°–ø–∞—Å–∏–±–æ!', '–ë–ª–∞–≥–æ–¥–∞—Ä—é!', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é!', '–ú–µ—Ä—Å–∏!',
        '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ', '–ë–ª–∞–≥–æ–¥–∞—Ä—é',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', '–ú–µ—Ä—Å–∏', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ',
        '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ,', '–°–ø–∞—Å–∏–±–æ,', '–ë–ª–∞–≥–æ–¥–∞—Ä—é,', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é,',
        '–ú–µ—Ä—Å–∏,', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ,', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', '+', '–û–∫, —Å–ø–∞—Å–∏–±–æ',
        '–û–∫ —Å–ø–∞—Å–∏–±–æ', '–û–∫, —Å—Ä–∞—Å–∏–±–æ!', '–û–∫'
    ]:
        if message.reply_to_message and message.reply_to_message.from_user.username:
            # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            #recipient_username = message.reply_to_message.from_user.username
            # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            recipient_userid = message.reply_to_message.from_user.id
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text = f"üëç <code>{username}</code> <b>–≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!</b>"
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º HTML
            await self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_to_message_id=message.reply_to_message.message_id,
                parse_mode='HTML'
            )

            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ratings –≤ —Ç–∞–±–ª–∏—Ü–µ settings –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 1
            self.database.query(f"UPDATE settings SET ratings=ratings+1 WHERE userid={recipient_userid}", commit=True)
            # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            print(f"({username} -> bot): {rq}\n(bot -> {username}): {username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!")
            return
        
    # –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò–≤–∞–Ω–æ–≤":
    if self.name_bot_command in rq or f'{self.name_bot_command},' in rq:
      await self.bot.send_message(chat_id=message.chat.id,
                                  text="‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...",
                                  reply_to_message_id=message_id)
      generated_text = self.chatgpt.getAnswer(message=rq,
                                              lang="ru",
                                              temperature=0.7,
                                              max_tokens=1500)
      await self.bot.edit_message_text(chat_id=message.chat.id,
                                      text=generated_text["message"],
                                      message_id=message_id+1)
      print(
        f"(@{username} -> bot): {rq}\n(bot -> @{username}): {generated_text['message']}"
      )

  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  def CheckTokens(self, userid, text):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid='{userid}'")
            
        tokens = text.split()
        num_tokens = len(tokens)

        if(num_tokens > userdata["tokens"]):
            return False
            
        self.database.query(f"UPDATE settings SET tokens={int(userdata['tokens']) - num_tokens} WHERE userid='{userid}'", commit=True)
        return True